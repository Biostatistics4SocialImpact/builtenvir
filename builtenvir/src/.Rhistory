2
2
head(df)
head(df)
head(ndf)
df
ndf
head(ndf)
levels(ndf$temperature)
levels(ndf$treatment)
treat.g
treat.g
treat.g
temp.g
plot(1)
par("din")
treat.g
treat.g
treat.g
treat.g
c(2.25, 12) * 1.5
c(2.25, 6) * 1.5
c(2.25, 6) * 1.2
c(2.25, 6) * 1.2
head(ndf)
levels(ndf$day)
factor(ndf$day) %>% head()
head(ndf)
levels(ndf$temperature)
plot(1)
par("din")
plot(1)
par("din")
head(ndf)
summary(lm(value ~ treatment * temperature, data = ndf, subset = variable == "minutia"))
head(ndf)
t.test(value ~ treatment * temperature, data = ndf, subset = variable == "minutia")
summary(lm(value ~ treatment * temperature, data = ndf, subset = variable == "minutia"))
summary(lm(value ~ treatment * temperature - 1, data = ndf, subset = variable == "minutia"))
summary(lm(value ~ treatment * temperature - 1, data = ndf, subset = variable == "minutia"))
summary(lm(value ~ treatment + treatment:temperature - 1, data = ndf, subset = variable == "minutia"))
vcov(fit)
coef(fit)
C
C %*% coef(fit) / c(C %*% vcov(fit) %*% C)
C %*% coef(fit) / sqrt(c(C %*% vcov(fit) %*% t(C)))
fit$df.residual
library (ggsignif)
treat.g + geom_signif(comparisons = list(c("CFM + RH", "RH")), annotations = "**")
treat.g + geom_signif(comparisons = list(c("CFM + RH", "RH")), annotations = "**", tip.length = 0, y_position = 50)
treat.g + geom_signif(comparisons = list(c("CFM + RH", "RH")), annotations = "**", tip_length = 0, y_position = 50)
treat.g + geom_signif(comparisons = list(c("CFM + RH", "RH")), annotations = "**", tip_length = 0, y_position = 20)
treat.g + geom_signif(comparisons = list(c("CFM + RH", "RH")), annotations = "**", tip_length = 0, y_position = 50) + scale_y_continuous(limits = c(-20, 60))
coef(fit)
C <- rbind(c(1, -1, 0, 0), c(0, 0, 1, -1), c(1, 1, -1, -1))
C
C %*% vcov(fit) %*% t(C)
C %*% coef(fit)
tstat
head(ndf)
coef(fit)
summary(fit)
coef(fit)
tstat
coef(summary(fit))
p.annot
pt(tstat[3], fit$df.residual)
1 - pt(tstat[3], fit$df.residual)
2 * (1 - pt(tstat[3], fit$df.residual))
treat.g
rel(3)
annot.size
plot(1)
par("din")
q()
fit$theta
b.truth
cbind(fit$theta, b.truth)
hist(fit$sims[, 1])
cbind(truth = b.truth, bayes = fit$theta, glm = b)
fit$kernel
plot(S[lower.tri(S)], (fit$kernel %*% t(fit$kernel))[-1, -1] %>% (function(x) x[lower.tri(x)]))
hist(fit$sims[, 6])
hist(fit$sims[, 2])
hist(fit$sims[, 2], freq = FALSE)
curve(dnorm(x, fit$theta[2], sd(fit$sims[, 2])), add = TRUE)
qqnorm(fit$theta[, 2])
qqnorm(fit$sims[, 2])
qqnorm(rnorm(1000))
qqnorm(fit$sims[, 2])
sd(fit$sims[, 2])
qqnorm(scale(fit$sims[, 2]))
cbind(truth = b.truth, bayes = fit$theta, glm = coef(glm(y ~ X - 1, family = binomial)))
names(fit)
library (ggplot2)
ls()
fit0 <- glm(y ~ X - 1, family = binomial)
qplot(diag(vcov(fit0)), diag(cov(fit$sims))) + geom_abline(intercept = 0, slope = 1)
q()
head(df)
library (ggplot2)
levels(fit$treatment)
levels(df$treatment)
order(df$treatment)
tail(df)
levels(df$temperature)
library (plyr)
library (reshape2)
summary(fit)
C
p.annot
treat.g
treat.g
treat.g
summary(fit)
p.annot
image(model.matrix(fit))
tstat
tstat
p.annot
subset(ndf, variable == "minutia")
x1 <- subset(ndf, variable == "minutia" & treatment == "RH + CFM")
x1 <- subset(ndf, variable == "minutia" & treatment == "RH + CFM")$value
x1
y1 <- subset(ndf, variable == "minutia" & treatment == "RH")$value
y1
t.test(x1, y1)
tstat
t.test(x1, y1, paired = TRUE)
t.test(x1, y1, correct = FALSE)
t.test(x1, y1, var.equal = TRUE)
tstat
summary(lm(minutia ~ treatment + temperature, data = df))
summary(lm(value ~ treatment + temperature, data = ndf, subset = variable == "minutia")
)
head(ndf)
dlply(ndf, "variable")
t.test(value ~ treatment, var.equal = TRUE, data = ndf)
head(ndf)
tstat
tail(ndf)
T <- t.test(rnorm(100), rnorm(100), paired = TRUE)
T
names(T)
T$p.value
summary(lm(value ~ treatment + temperature, data = ndf, subset = variable == "minutia"))
tstat
treat.g
p.annot
p.annot
treat.g
names(df)
expression(paste("Ridge Thickenss (", mu, "m)"))
p.annot
treat.g
treat.g
treat.g
names(df)
subset(ndf, variable == var.name)
p.annot
library (scales)
print.g
summary(Fit)
summary(fit)
fitted(fit)
names(df)
q()
q()
